# Generated by Django 4.1.4 on 2022-12-20 22:56

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='15 символов. Только цифры', max_length=15, verbose_name='phone of seller')),
                ('product_id', models.IntegerField(help_text='id товара', verbose_name='id product')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='15 символов. Только цифры', max_length=15, verbose_name='phone of seller')),
                ('label', models.TextField(help_text='От 5 до 30 символов. Название товара.', max_length=30, verbose_name='name')),
                ('description', models.TextField(help_text='От 5 до 500 символов. Название товара.', max_length=500, verbose_name='description')),
                ('price', models.CharField(help_text='Стоймость товара.', max_length=10, verbose_name='price')),
                ('category', models.CharField(choices=[('pets', 'Товары для животных'), ('electronics', 'Электроника'), ('clothes', 'Одежда'), ('books', 'Книги'), ('pharmacy', 'Аптека'), ('children', 'Детские товары'), ('other', 'Другое')], default='Другое', max_length=30, verbose_name='category')),
                ('image', models.FileField(help_text='Изображение товара', upload_to='', verbose_name='image')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким телефоном уже существует!'}, help_text='15 символов. Только цифры', max_length=15, unique=True, verbose_name='phone')),
                ('nickname', models.CharField(error_messages={'unique': 'Пользователь с таким никнеймом уже существует!'}, max_length=20, unique=True, verbose_name='nickname')),
                ('second_name', models.CharField(max_length=150, verbose_name='second name')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с такой почтой уже существует!'}, max_length=254, unique=True, verbose_name='email address')),
                ('usertype', models.CharField(choices=[('buyer', 'Я покупатель'), ('seller', 'Я продавец')], default='buyer', help_text='Usertype', max_length=15, verbose_name='usertype')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
